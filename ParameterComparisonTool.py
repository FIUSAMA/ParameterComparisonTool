# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from openpyxl import Workbook
from openpyxl.styles import Protection
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QHeaderView, QListWidget, QMenu, QApplication, QProgressBar, QMessageBox, QStyledItemDelegate, QAction, QLineEdit, QSizePolicy
from PyQt5.QtCore import QEvent, Qt
from functools import partial
from ast import literal_eval
import json
import os

class Ui_MainWindow(object):   
    def setupUi(self, MainWindow):
        self.MainWindown = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setWindowIcon(QtGui.QIcon('EPC_Logo.png'))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.verticalLayout1 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout1.setObjectName("verticalLayout1")
        
        #Initialize Attributes
        self.dictofIndexesFile1 = {}
        self.dictofIndexesFile2 = {}
        self.setofCommonKeys = {}
        self.setofDifferrentKeysFile1 = {}
        self.setofDifferrentKeysFile2 = {}
        self.dictofCommonPar = {}
        self.f1NameTab2 = []
        self.f2NameTab2 = []
        self.listofCommonNames = []
        self.extraParinFile1 = {}
        self.extraParinFile2 = {}
        self.data1 = []
        self.data2 = []
        self.data1Processed = []
        self.data2Processed = []
        self.serialNumber1 = ''
        self.serialNumber2 = ''
        self.softwareHash1 = ''
        self.softwareHash2 = ''
        
        #Tabs
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget) 
        #self.tabWidget.setGeometry(QtCore.QRect(600, 0, 741, 571))
        #self.tabWidget.setObjectName("tabWidget")
        
        self.verticalLayout1.addWidget(self.tabWidget)
        
        #self.tab1 = QtWidgets.QWidget()
        #self.tab1.setObjectName("tab1")
        #self.tabWidget.addTab(self.tab1, "")

        self.tab2 = QtWidgets.QWidget()
        self.tab2.setObjectName("tab2")
        self.tabWidget.addTab(self.tab2, "")
        
        self.subtabWidget =  QtWidgets.QTabWidget(self.tab2)
        #self.subtabWidget.setGeometry(QtCore.QRect(60, 0, 741, 571))
        #self.subtabWidget.setObjectName("tabWidget")
        self.subtabWidget.setStyleSheet("QTabBar::tab { width: 200px; }")
        
        self.tab2Tab1 = QtWidgets.QWidget()
        self.tab2Tab1.setObjectName("tab2Tab1")
        self.subtabWidget.addTab(self.tab2Tab1, "")
        self.previousTab = self.tab2Tab1
        
        self.tab2Tab2 = QtWidgets.QWidget()
        self.tab2Tab2.setObjectName("tab2Tab2")
        self.subtabWidget.addTab(self.tab2Tab2, "")
        
        self.tab2Tab3 = QtWidgets.QWidget()
        self.tab2Tab3.setObjectName("tab2Tab3")
        self.subtabWidget.addTab(self.tab2Tab3, "")
        
        self.subtabWidget.currentChanged.connect(self.tabChanged)
        
        #Check boxes
        # self.checkBox1 = QtWidgets.QCheckBox(self.tab1)
        # self.checkBox1.setGeometry(QtCore.QRect(240, 90, 131, 20))
        # self.checkBox1.setObjectName("checkBox1")
        # self.checkBox1.clicked.connect(self.buttonPressed)
        
        # self.checkBox2 = QtWidgets.QCheckBox(self.tab1)
        # self.checkBox2.setGeometry(QtCore.QRect(240, 120, 131, 20))
        # self.checkBox2.setObjectName("checkBox2")
        # self.checkBox2.clicked.connect(self.buttonPressed)
        
        self.checkBoxReadOnly= QtWidgets.QCheckBox(self.tab2)
        self.checkBoxReadOnly.setGeometry(QtCore.QRect(240, 90, 131, 20))
        self.checkBoxReadOnly.setObjectName("checkBox3")
        
        #Buttons
        # self.button = QtWidgets.QPushButton(self.tab1)
        # #self.button.setGeometry(QtCore.QRect(480, 90, 131, 30))
        # self.button.setObjectName("Open File")
        # self.button.clicked.connect(self.openFileDialog)
        
        self.buttonOpenFile1 = QtWidgets.QPushButton(self.tab2)        
        #self.buttonOpenFile1.setGeometry(QtCore.QRect(20, 20, 93, 28))
        self.buttonOpenFile1.setObjectName("Open File 1")
        self.buttonOpenFile1.clicked.connect(self.openFileDialog1Tab2)
        self.buttonOpenFile1.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.buttonOpenFile1.setFixedWidth(150)
        
        self.buttonOpenFile2 = QtWidgets.QPushButton(self.tab2)        
        #self.buttonOpenFile2.setGeometry(QtCore.QRect(120, 20, 93, 28))
        self.buttonOpenFile2.setObjectName("Open File 2")
        self.buttonOpenFile2.clicked.connect(self.openFileDialog2Tab2)
        self.buttonOpenFile2.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.buttonOpenFile2.setFixedWidth(150)
        
        self.buttonCompare = QtWidgets.QPushButton(self.tab2)        
        #self.buttonCompare.setGeometry(QtCore.QRect(120, 20, 93, 28))
        self.buttonCompare.setObjectName("Compare")
        self.buttonCompare.clicked.connect(self.updateFile)
        self.buttonCompare.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.buttonCompare.setFixedWidth(150)
        
        self.buttonCreateOverlay = QtWidgets.QPushButton(self.tab2)        
        #self.buttonCreateOverlay.setGeometry(QtCore.QRect(120, 20, 93, 28))
        self.buttonCreateOverlay.setObjectName("Create Overlay")
        self.buttonCreateOverlay.clicked.connect(self.toOverlayPMVS)
        self.buttonCreateOverlay.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.buttonCreateOverlay.setFixedWidth(150)
        
        self.buttonCreateExcel = QtWidgets.QPushButton(self.tab2)        
        #self.buttonCreateExcel.setGeometry(QtCore.QRect(20, 20, 93, 28))
        self.buttonCreateExcel.setObjectName("Open File 1")
        self.buttonCreateExcel.clicked.connect(self.tabletoWorkbook)
        self.buttonCreateExcel.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.buttonCreateExcel.setFixedWidth(150)
           
        
        #Table for Common Parameters
        self.tableWidgetCommonPar = QtWidgets.QTableWidget(self.tab2Tab1)
        self.tableWidgetCommonPar.setObjectName("tableWidgetCommonPar")
        self.tableWidgetCommonPar.setColumnCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetCommonPar.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetCommonPar.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetCommonPar.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetCommonPar.setHorizontalHeaderItem(3, item)    
        
        #Table for Extra Paramters in File 1
        self.tableWidgetExtraPar1 = QtWidgets.QTableWidget(self.tab2Tab2)
        self.tableWidgetExtraPar1.setObjectName("tableWidgetCommonPar")
        self.tableWidgetExtraPar1.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetExtraPar1.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetExtraPar1.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetExtraPar1.setHorizontalHeaderItem(2, item)  
        
        #Table for Extra Paramters in File 2
        self.tableWidgetExtraPar2 = QtWidgets.QTableWidget(self.tab2Tab3)
        self.tableWidgetExtraPar2.setObjectName("tableWidgetCommonPar")
        self.tableWidgetExtraPar2.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetExtraPar2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetExtraPar2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetExtraPar2.setHorizontalHeaderItem(2, item)  
        
        # Create the search box
        self.searchBox = QLineEdit(self.tab2)
        self.searchBox.setPlaceholderText("Search...")
        self.searchBox.textChanged.connect(self.searchTable)
        self.searchBox.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.searchBox.setFixedWidth(150)
        
        
        #Search Layout
        #self.horizontalLayoutSearch = QtWidgets.QHBoxLayout()
        #self.horizontalLayoutSearch.insertWidget(0, self.searchBox)
        
        self.horizontalLayoutFiles = QtWidgets.QHBoxLayout()
        self.horizontalLayoutFiles.addWidget(self.buttonOpenFile1)
        self.horizontalLayoutFiles.addWidget(self.buttonOpenFile2)
        self.horizontalLayoutFiles.addWidget(self.buttonCompare)
        self.horizontalLayoutFiles.addWidget(self.buttonCreateOverlay)
        self.horizontalLayoutFiles.addWidget(self.checkBoxReadOnly)
        self.horizontalLayoutFiles.addStretch(1)
        self.horizontalLayoutFiles.addWidget(self.buttonCreateExcel)
        #Layout Tab 2
        self.verticalLayout2 = QtWidgets.QVBoxLayout(self.tab2)
        #self.verticalLayout2.addWidget(self.searchBox)
        self.verticalLayout2.setObjectName("verticalLayout2")
        self.verticalLayout2.addLayout(self.horizontalLayoutFiles)
        self.horizontalLayoutSearchBox = QtWidgets.QHBoxLayout()
        self.horizontalLayoutSearchBox.addWidget(self.searchBox)
        self.horizontalLayoutSearchBox.addWidget(self.checkBoxReadOnly)
        self.verticalLayout2.addLayout(self.horizontalLayoutSearchBox)
        #self.verticalLayout2.addWidget(self.buttonOpenFile1)
        #self.verticalLayout2.addWidget(self.buttonOpenFile2)
        #self.verticalLayout2.addWidget(self.buttonCompare)
        #self.verticalLayout2.addWidget(self.buttonCreateExcel)
        self.verticalLayout2.addWidget(self.subtabWidget)
        self.verticalLayoutTab2Tab1 = QtWidgets.QVBoxLayout(self.tab2Tab1)
        self.verticalLayoutTab2Tab1.setObjectName("verticalLayoutTab2Tab1")
        self.verticalLayoutTab2Tab1.addWidget(self.tableWidgetCommonPar)
        self.verticalLayoutTab2Tab2 = QtWidgets.QVBoxLayout(self.tab2Tab2)
        self.verticalLayoutTab2Tab2.setObjectName("verticalLayoutTab2Tab2")
        self.verticalLayoutTab2Tab2.addWidget(self.tableWidgetExtraPar1)
        self.verticalLayoutTab2Tab3 = QtWidgets.QVBoxLayout(self.tab2Tab3)
        self.verticalLayoutTab2Tab3.setObjectName("verticalLayoutTab2Tab3")
        self.verticalLayoutTab2Tab3.addWidget(self.tableWidgetExtraPar2)
        
        ## For Common Parameters
        #Cell Context Menu
        self.tableWidgetCommonPar.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidgetCommonPar.customContextMenuRequested.connect(partial(self.showCellContextMenu, self.tableWidgetCommonPar))
        
        #Header context menu
        self.tableWidgetCommonPar.horizontalHeader().setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidgetCommonPar.horizontalHeader().customContextMenuRequested.connect(partial(self.showHeaderContextMenu, self.tableWidgetCommonPar))
        
        ## For Extra Parameter in 1
        #Cell Context Menu
        self.tableWidgetExtraPar1.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidgetExtraPar1.customContextMenuRequested.connect(partial(self.showCellContextMenu, self.tableWidgetExtraPar1))
        
        #Header context menu
        self.tableWidgetExtraPar1.horizontalHeader().setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidgetExtraPar1.horizontalHeader().customContextMenuRequested.connect(partial(self.showHeaderContextMenu, self.tableWidgetExtraPar1))
        
        
        ## For Extra Parameter in 2
        #Cell Context Menu
        self.tableWidgetExtraPar2.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidgetExtraPar2.customContextMenuRequested.connect(partial(self.showCellContextMenu, self.tableWidgetExtraPar2))
        
        #Header context menu
        self.tableWidgetExtraPar2.horizontalHeader().setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidgetExtraPar2.horizontalHeader().customContextMenuRequested.connect(partial(self.showHeaderContextMenu, self.tableWidgetExtraPar2))
        
        
        #List widget
        # self.listWidget = QListWidget()
        # self.listWidget.addItems(('x','y','z'))
        # self.listWidget.installEventFilter(MainWindow)
        # self.verticalLayout2.addWidget(self.listWidget)
        
        #Labels
        # self.label1 = QtWidgets.QLabel(self.tab1)
        # #self.label1.setGeometry(QtCore.QRect(300, 180, 55, 16))
        # self.label1.setObjectName("label1")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        #self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Parameter Comparison Tool"))
        #Tab 1
        # self.checkBox1.setText(_translate("MainWindow", "Grid Forming"))
        # self.checkBox2.setText(_translate("MainWindow", "Grid Following"))
        # self.label1.setText(_translate("MainWindow", "TextLabel"))
        # self.button.setText(_translate("MainWindow", "Open File"))
        # self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab1), _translate("MainWindow", "Overlay Generator"))
        #Tab 2
        self.buttonOpenFile1.setText(_translate("MainWindow", "Open File 1"))
        self.buttonOpenFile2.setText(_translate("MainWindow", "Open File 2"))
        self.buttonCompare.setText(_translate("MainWindow", "Compare"))
        self.buttonCreateOverlay.setText(_translate("MainWindow", "Create Overlay"))
        self.buttonCreateExcel.setText(_translate("MainWindow", "Export to Workbook"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab2), _translate("MainWindow", "Parameter Comparator"))
        self.subtabWidget.setTabText(self.subtabWidget.indexOf(self.tab2Tab1), _translate("MainWindow", "Common Parameters"))
        self.subtabWidget.setTabText(self.subtabWidget.indexOf(self.tab2Tab2), _translate("MainWindow", "Extra par. in File 1"))
        self.subtabWidget.setTabText(self.subtabWidget.indexOf(self.tab2Tab3), _translate("MainWindow", "Extra par. in File 2"))
        self.checkBoxReadOnly.setText(_translate("MainWindow", "Show Read Only Parameters"))
        ## Tab2Tab1
        item = self.tableWidgetCommonPar.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Parameter Name"))
        item = self.tableWidgetCommonPar.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "File 1"))
        item = self.tableWidgetCommonPar.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "File 2"))
        item = self.tableWidgetCommonPar.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Selected"))
        ## Tab2Tab2
        item = self.tableWidgetExtraPar1.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Parameter Name"))
        item = self.tableWidgetExtraPar1.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "File 1"))
        item = self.tableWidgetExtraPar1.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Selected"))
        ## Tab2Tab3
        item = self.tableWidgetExtraPar2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Parameter Name"))
        item = self.tableWidgetExtraPar2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "File 2"))
        item = self.tableWidgetExtraPar2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Selected"))
        
        
    def buttonPressed(self):
        if self.checkBox1.isChecked():
            self.label1.setText("Checked")
            self.updateFile()
        else:
            self.label1.setText("Un-Checked")
        self.label1.adjustSize()
        
    def showPopUp(self, message, iconType):
        msg = QMessageBox()
        msg.setWindowTitle("Message")
        msg.setText(message)
        msg.setIcon(iconType)
        msg.exec_()
        
    def eventFilter(self, source, event):
        if event.type() == QEvent.ContextMenu and source is self.listWidget:
            menu = QMenu(self.listWidget)
            menu.addAction('Action 1')
            menu.addAction('Action 2')
            return True
        return MainWindow.eventFilter(source, event)
        

    def openFileDialog(self):
        fname = QFileDialog.getOpenFileName(MainWindow, "Open File", "", "Text files (*.pmvs);;All files(*)")
        if fname:
            self.fname = fname[0]
    
    def openFileDialog1Tab2(self):
        self.f1NameTab2= QFileDialog.getOpenFileName(MainWindow, "Open File", "", "Text files (*.pmvs *.epp);;All files(*)")
        if self.f1NameTab2[0]:
            self.reset()
            self.f1_extension = os.path.splitext(self.f1NameTab2[0])[1]
            with open(self.f1NameTab2[0],'r') as rf1:
                self.data1 = json.load(rf1)
            self.fileOneName = os.path.basename(self.f1NameTab2[0])

    def openFileDialog2Tab2(self):
        self.f2NameTab2 = QFileDialog.getOpenFileName(MainWindow, "Open File", "", "Text files (*.pmvs *.epp);;All files(*)")
        if self.f2NameTab2[0]:
            self.reset()
            self.f2_extension = os.path.splitext(self.f2NameTab2[0])[1]
            with open(self.f2NameTab2[0],'r') as rf2:
                self.data2 = json.load(rf2)
            self.fileTwoName = os.path.basename(self.f2NameTab2[0])
                
    def setHorizontalHeader(self, column, text, table):
        item = table.horizontalHeaderItem(column)
        item.setText(text)
        header = table.horizontalHeader()
        header.setSectionResizeMode(column, QHeaderView.ResizeMode.ResizeToContents)
        
    def populateTable(self, key, value, row, column, tableName):
        name = QtWidgets.QTableWidgetItem(str(key))
        name.setFlags(name.flags() & ~Qt.ItemIsEditable)
        value = QtWidgets.QTableWidgetItem(str(value))
        tableName.setItem(row, 0, name)
        tableName.setItem(row, column, value)
        
    def biggerFile(self):
        if len(self.data1['children']) >= len(self.data2['children']):
            return len(self.data1['children'])
        return len(self.data2['children'])
            
    def updateFile(self):
        self.reset()
        if self.data1 and self.data2:
            self.setHorizontalHeader(1, "File 1 \n" + self.fileOneName, self.tableWidgetCommonPar)
            self.setHorizontalHeader(2, "File 2 \n" + self.fileTwoName, self.tableWidgetCommonPar)
            self.setHorizontalHeader(1, "File 1 \n" + self.fileOneName, self.tableWidgetExtraPar1)
            self.setHorizontalHeader(1, "File 2 \n" + self.fileTwoName, self.tableWidgetExtraPar2)
            
            self.tableWidgetCommonPar.setSortingEnabled(False)
            self.tableWidgetExtraPar1.setSortingEnabled(False)
            self.tableWidgetExtraPar2.setSortingEnabled(False)
            
            if self.f1_extension == '.epp':
                data1 = [{'_type': 'parameter', 'name': key, 'value': value, 'parameter_uuid': None, 'readable': True, 'writable': True} for key, value in self.data1.items()]
                self.data1Processed = data1.copy()
            else:
                data1 = self.data1['children'].copy()  
                self.data1Processed = self.data1['children'].copy()
                
            if self.f2_extension == '.epp':    
                data2 = [{'_type': 'parameter', 'name': key, 'value': value, 'parameter_uuid': None, 'readable': True, 'writable': True} for key, value in self.data2.items()]
                self.data2Processed = data2.copy()
            else:
                data2 = self.data2['children'].copy()
                self.data2Processed = self.data2['children'].copy()
                
            # Find indexes corresponding to parameter names
            for i in range(0, len(self.data1Processed)):
                self.dictofIndexesFile1[self.data1Processed[i]['name']] = (self.data1Processed[i]['value'], i, self.data1Processed[i]['writable'])
            
            for i in range(0, len(self.data2Processed)):
                self.dictofIndexesFile2[self.data2Processed[i]['name']] = (self.data2Processed[i]['value'], i, self.data2Processed[i]['writable'])
            
            self.setofCommonKeys = set(self.dictofIndexesFile1.keys()) & set(self.dictofIndexesFile2.keys())
            self.setofDifferrentKeysFile1 = set(self.dictofIndexesFile1.keys()) - set(self.dictofIndexesFile2.keys())
            self.setofDifferrentKeysFile2 = set(self.dictofIndexesFile2.keys()) - set(self.dictofIndexesFile1.keys())
            
            if 'SN:SerialNumber' in self.dictofIndexesFile1.keys():
                self.serialNumber1 = self.dictofIndexesFile1['SN:SerialNumber'][0] if self.dictofIndexesFile1['SN:SerialNumber'][0] is not None else ''
            if 'SoftwareHash:SoftwareHash' in self.dictofIndexesFile1.keys():
                self.softwareHash1 = self.dictofIndexesFile1['SoftwareHash:SoftwareHash'][0] if self.dictofIndexesFile1['SoftwareHash:SoftwareHash'][0] is not None else ''
            if 'SN:SerialNumber' in self.dictofIndexesFile2.keys():
                self.serialNumber2 = self.dictofIndexesFile2['SN:SerialNumber'][0] if self.dictofIndexesFile2['SN:SerialNumber'][0] is not None else ''
            if 'SoftwareHash:SoftwareHash' in self.dictofIndexesFile2.keys():
                self.softwareHash2 = self.dictofIndexesFile2['SoftwareHash:SoftwareHash'][0] if self.dictofIndexesFile2['SoftwareHash:SoftwareHash'][0] is not None else ''
            
            #Populating table with common parameters in both the files
            row = 0
            for key in self.setofCommonKeys:
                if self.dictofIndexesFile1[key][0] != self.dictofIndexesFile2[key][0]:
                    if  self.checkBoxReadOnly.isChecked():
                        self.tableWidgetCommonPar.setRowCount(row+1)
                        self.dictofCommonPar[key] = (self.dictofIndexesFile1[key][0], self.dictofIndexesFile2[key][0])
                        self.populateTable(key, self.dictofCommonPar[key][0] if self.dictofCommonPar[key][0] is not None else '' , row, 1, self.tableWidgetCommonPar)
                        self.populateTable(key, self.dictofCommonPar[key][1] if self.dictofCommonPar[key][1] is not None else '', row, 2, self.tableWidgetCommonPar)
                        row += 1
                    elif self.dictofIndexesFile1[key][2] == True:
                        self.tableWidgetCommonPar.setRowCount(row+1)
                        self.dictofCommonPar[key] = (self.dictofIndexesFile1[key][0], self.dictofIndexesFile2[key][0])
                        self.populateTable(key, self.dictofCommonPar[key][0] if self.dictofCommonPar[key][0] is not None else '' , row, 1, self.tableWidgetCommonPar)
                        self.populateTable(key, self.dictofCommonPar[key][1] if self.dictofCommonPar[key][1] is not None else '', row, 2, self.tableWidgetCommonPar)
                        row += 1
            
            #Populating table with extra parameters in file 1
            row = 0
            for key in self.setofDifferrentKeysFile1:
                if self.checkBoxReadOnly.isChecked():
                    self.tableWidgetExtraPar1.setRowCount(row+1)
                    self.extraParinFile1[key] = self.dictofIndexesFile1[key][0]
                    self.populateTable(key, self.extraParinFile1[key] if self.extraParinFile1[key] is not None else '', row, 1, self.tableWidgetExtraPar1)
                    row +=1
                elif self.dictofIndexesFile1[key][2] == True:
                    self.tableWidgetExtraPar1.setRowCount(row+1)
                    self.extraParinFile1[key] = self.dictofIndexesFile1[key][0]
                    self.populateTable(key, self.extraParinFile1[key] if self.extraParinFile1[key] is not None else '', row, 1, self.tableWidgetExtraPar1)
                    row +=1
            
            #Populating table with extra parameters in file 2 
            row = 0
            for key in self.setofDifferrentKeysFile2:
                if self.checkBoxReadOnly.isChecked():
                    self.tableWidgetExtraPar2.setRowCount(row+1)
                    self.extraParinFile2[key] = self.dictofIndexesFile2[key][0]
                    self.populateTable(key, self.extraParinFile2[key] if self.extraParinFile2[key] is not None else '', row, 1, self.tableWidgetExtraPar2)
                    row +=1
                elif self.dictofIndexesFile2[key][2] == True:
                    self.tableWidgetExtraPar2.setRowCount(row+1)
                    self.extraParinFile2[key] = self.dictofIndexesFile2[key][0]
                    self.populateTable(key, self.extraParinFile2[key] if self.extraParinFile2[key] is not None else '', row, 1, self.tableWidgetExtraPar2)
                    row +=1
            
                        
            if not (self.dictofCommonPar or self.extraParinFile1 or self.extraParinFile2):
                self.showPopUp('No differences found', QMessageBox.Information)
                
            self.tableInit()
        else:
            self.showPopUp('Please select the files first', QMessageBox.Warning)
    
    def tabletoWorkbook(self):
        self.updateFile()
        # read the workbook into python and make it the active workbook
        if (self.dictofCommonPar or self.extraParinFile1 or self.extraParinFile2):
            pmvs_excel = Workbook()
            sheet = [pmvs_excel.create_sheet("Comparison", 0),
                        pmvs_excel.create_sheet("Extra Par. in File 1", 1), 
                        pmvs_excel.create_sheet("Extra Par. in File 2", 2)]
                            ## Common parameters
            # Label Columns
            sheet[0]["B6"] = "Name"
            sheet[0]["C6"] = "Value"

            # Display filenames
            sheet[0]["B2"] = "PMVS File Name"
            sheet[0]["C2"] = self.fileOneName
            sheet[0]["C2"].protection = Protection(locked=True)
            sheet[0]["D2"] = self.fileTwoName
            sheet[0]["D2"].protection = Protection(locked=True)
            # Display SNs and Firmware
            sheet[0]["B3"] = "SN:SerialNumber"
            sheet[0]["B4"] = "SoftwareHash"
            sheet[0]["C3"] = self.serialNumber1
            if self.softwareHash1 is not '':
                sheet[0]["C4"] = hex(int(self.softwareHash1))[2:]
            sheet[0]["D3"] = self.serialNumber2
            sheet[0]["D4"] = self.softwareHash2
            if self.softwareHash2 is not '':
                sheet[0]["D4"] = hex(int(self.softwareHash2))[2:]
            
            # Extra in File 1
            sheet[1]["B6"] = "Name"
            sheet[1]["C6"] = "Value"

            # Display filenames
            sheet[1]["B2"] = "PMVS File Name"
            sheet[1]["C2"] = self.fileOneName

            # Display SNs and Firmware
            sheet[1]["B3"] = "SN:SerialNumber"
            sheet[1]["B4"] = "SoftwareHash"
            sheet[1]["C3"] = self.serialNumber1
            if self.softwareHash1 is not '':
                sheet[1]["C4"] = hex(int(self.softwareHash1))[2:]
            
            # Extra in File 2
            sheet[2]["B6"] = "Name"
            sheet[2]["C6"] = "Value"

            # Display filenames
            sheet[2]["B2"] = "PMVS File Name"
            sheet[2]["C2"] = self.fileTwoName

            # Display SNs and Firmware
            sheet[2]["B3"] = "SN:SerialNumber"
            sheet[2]["B4"] = "SoftwareHash"
            sheet[2]["C3"] = self.serialNumber2
            if self.softwareHash2 is not '':
                sheet[2]["C4"] = hex(int(self.softwareHash2))[2:]
            if self.dictofCommonPar :          
                self.dictofCommonParSorted = dict(sorted(self.dictofCommonPar.items()))      
                # Populating the comparison sheet in workbook
                for i, key in enumerate(self.dictofCommonParSorted):
                    sheet[0][f"B{i + 7}"] = key
                    sheet[0][f"C{i + 7}"] = float(self.dictofCommonParSorted[key][0]) if self.dictofCommonParSorted[key][0] is not None else ''
                    sheet[0][f"D{i + 7}"] = float(self.dictofCommonParSorted[key][1]) if self.dictofCommonParSorted[key][1] is not None else ''
                sheet[0].freeze_panes = "C7"
                
            if self.extraParinFile1:
                self.extraParinFile1Sorted = dict(sorted(self.extraParinFile1 .items()))
                # Populating the Extra in File 1 sheet in workbook
                for i,key in enumerate(self.extraParinFile1Sorted):
                    sheet[1][f"B{i + 7}"] = key
                    sheet[1][f"C{i + 7}"] = float(self.extraParinFile1Sorted[key]) if self.extraParinFile1Sorted[key] is not None else ''
                    
            if self.extraParinFile2:
                self.extraParinFile2Sorted = dict(sorted(self.extraParinFile2 .items()))
                # Populating the Extra in File 1 sheet in workbook
                for i,key in enumerate(self.extraParinFile2Sorted):
                    sheet[2][f"B{i + 7}"] = key
                    sheet[2][f"C{i + 7}"] = float(self.extraParinFile2Sorted[key]) if self.extraParinFile2Sorted[key] is not None else ''
                    
            fname = []
            while(not fname):
                try:
                    fname = QFileDialog.getSaveFileName(MainWindow, 'Save As', 'Comparison.xlsx', filter='XLSX(*.xlsx)')
                    if fname[0]:
                        filename = fname[0]
                        pmvs_excel.save(filename)
                        pmvs_excel.close()
                except PermissionError:
                    self.showPopUp('Access denied', QMessageBox.Information)
                    fname = []   
        else:
            self.showPopUp('Nothing to print', QMessageBox.Information)
            
    
    def toOverlayPMVS(self):
        
        sourceColumn = 3
        rowCount = self.tableWidgetCommonPar.rowCount()
        overlaydata = []
        for row in range(rowCount):
            if self.tableWidgetCommonPar.item(row, sourceColumn) is not None and self.tableWidgetCommonPar.item(row, 0) is not None:
                sourceItemValue = self.tableWidgetCommonPar.item(row, sourceColumn).text() 
                sourceItemName = self.tableWidgetCommonPar.item(row, 0).text()
                if sourceItemValue is not '':
                    overlaydata.append(self.data1Processed[self.dictofIndexesFile1[sourceItemName][1]])
                    try:
                        overlaydata[-1]['value'] = sourceItemValue
                    except Exception as error:
                        self.showPopUp(str(error), QMessageBox.Critical)
                        break
        
        sourceColumn = 2
        rowCount = self.tableWidgetExtraPar1.rowCount()
        for row in range(rowCount):
            if self.tableWidgetExtraPar1.item(row, sourceColumn) is not None and self.tableWidgetExtraPar1.item(row, 0) is not None:
                sourceItemValue = self.tableWidgetExtraPar1.item(row, sourceColumn).text() 
                sourceItemName = self.tableWidgetExtraPar1.item(row, 0).text()
                if sourceItemValue is not '':
                    overlaydata.append(self.data1Processed[self.dictofIndexesFile1[sourceItemName][1]])
                    try:
                        overlaydata[-1]['value'] = sourceItemValue
                    except Exception as error:
                        self.showPopUp(str(error), QMessageBox.Critical)
                        break
        
        sourceColumn = 2
        rowCount = self.tableWidgetExtraPar2.rowCount()
        for row in range(rowCount):
            if self.tableWidgetExtraPar2.item(row, sourceColumn) is not None and self.tableWidgetExtraPar2.item(row, 0) is not None:
                sourceItemValue = self.tableWidgetExtraPar2.item(row, sourceColumn).text() 
                sourceItemName = self.tableWidgetExtraPar2.item(row, 0).text()
                if sourceItemValue is not '':
                    overlaydata.append(self.data2Processed[self.dictofIndexesFile2[sourceItemName][1]])
                    try:
                        overlaydata[-1]['value'] = sourceItemValue
                    except Exception as error:
                        self.showPopUp(str(error), QMessageBox.Critical)
                        break
         
        dumpData = {'_type': 'root', 'name': 'Value Set', 'children': overlaydata}
        if overlaydata:
            fname = []
            while(not fname):
                try:
                    fname = QFileDialog.getSaveFileName(MainWindow, 'Save As', 'Overlay.pmvs', filter='PMVS(*.pmvs)')
                    if fname[0]:
                        filename = fname[0]
                        out_file = open(filename, "w")
                        json.dump(dumpData, out_file, indent = 4)
                        out_file.close()
                except PermissionError:
                    self.showPopUp('Access denied', QMessageBox.Information)
                    fname = []   

    def toOverlayEPP(self):
        pass
        
    def deleteSelectedCells(self, table):
        selected = table.selectedIndexes()
        for index in selected:
            row = index.row()
            column = index.column()
            sourceItem = table.item(row, column)
            if sourceItem is not None and column is not 0:
                table.setItem(row, column, QtWidgets.QTableWidgetItem(''))
                
    def deleteColumn(self, table):
        column = self.headerCol
        rowCount = table.rowCount()
        for row in range(rowCount):
            sourceItem = table.item(row, column)
            if sourceItem is not None and column is not 0:
                table.setItem(row, column, QtWidgets.QTableWidgetItem(''))
        
    def copyCellData(self, copytoColumn, table):
        # Get selected cell and copy data to another cell
        selected = table.selectedIndexes()
        for index in selected:
            if index.column() == 1: # Check if selected cell is in column 1
                if copytoColumn == 2:
                    row = index.row()
                    item = table.item(row, 1) # Get item from column 1
                    text = item.text() # Get text from item
                    table.setItem(row, 2, QtWidgets.QTableWidgetItem(text)) # Set item in column 2
                elif copytoColumn == 3:
                    row = index.row()
                    item = table.item(row, 1) # Get item from column 1
                    text = item.text() # Get text from item
                    table.setItem(row, 3, QtWidgets.QTableWidgetItem(text)) # Set item in column 3
            elif index.column() == 2:
                if copytoColumn == 1:
                    row = index.row()
                    item = table.item(row, 2) # Get item from column 2
                    text = item.text() # Get text from item
                    table.setItem(row, 1, QtWidgets.QTableWidgetItem(text)) # Set item in column 1
                elif copytoColumn == 3:
                    row = index.row()
                    item = table.item(row, 2) # Get item from column 2
                    text = item.text() # Get text from item
                    table.setItem(row, 3, QtWidgets.QTableWidgetItem(text)) # Set item in column 3
            elif index.column() == 3:
                if copytoColumn == 1:
                    row = index.row()
                    item = table.item(row, 3) # Get item from column 3
                    text = item.text() # Get text from item
                    table.setItem(row, 1, QtWidgets.QTableWidgetItem(text)) # Set item in column 1
                elif copytoColumn == 2:
                    row = index.row()
                    item = table.item(row, 3) # Get item from column 3
                    text = item.text() # Get text from item
                    table.setItem(row, 2, QtWidgets.QTableWidgetItem(text)) # Set item in column 2
        
    def copyColumn(self, targetColumn, table):
        sourceColumn = self.headerCol
        rowCount = table.rowCount()
        if targetColumn != sourceColumn and sourceColumn != 0:
            for row in range(rowCount):
                sourceItem = table.item(row, sourceColumn)
                if sourceItem is not None:
                    targetItem = QtWidgets.QTableWidgetItem(sourceItem.text())
                    table.setItem(row, targetColumn, targetItem)
                    
            
    def showCellContextMenu(self, table, pos):
        global_pos = table.viewport().mapToGlobal(pos)
        
        contextMenu = QMenu(table)
        deleteAction = QAction("Delete", table)
        copytoColumn = QAction ("Copy to Column", table)
        contextMenu.addAction(deleteAction)
        contextMenu.addAction(copytoColumn)      
        
        copyAction = contextMenu.actions()[1] 
        submenu = QMenu(contextMenu)  
        action1 = QAction('File 1', submenu)
        if table == self.tableWidgetCommonPar:
            action2 = QAction('File 2', submenu)
        action3 = QAction('Selected', submenu)
        
        submenu.addAction(action1)
        if table == self.tableWidgetCommonPar:
            submenu.addAction(action2)
        submenu.addAction(action3)
        copyAction.setMenu(submenu)
        
        deleteAction.triggered.connect(lambda: self.deleteSelectedCells(table))
        action1.triggered.connect(lambda: self.copyCellData(1, table))  # Copy to column File 1
        if table == self.tableWidgetCommonPar:
            action2.triggered.connect(lambda: self.copyCellData(2, table))  # Copy to column File 2
            action3.triggered.connect(lambda: self.copyCellData(3, table))  # Copy to column Selected
        else:
            action3.triggered.connect(lambda: self.copyCellData(2, table))  # Copy to column Selected
        
        
        contextMenu.exec_(global_pos)

    def showHeaderContextMenu(self, table, pos):
        globalPos = table.horizontalHeader().mapToGlobal(pos)       
        self.headerCol = table.horizontalHeader().logicalIndexAt(pos.x())
        
        headerMenu = QMenu(table)
        headerAction1 = QAction("Copy to Column", table)
        headerAction2 = QAction("Delete Column", table)
        headerMenu.addAction(headerAction1)  
        headerMenu.addAction(headerAction2)    
        
        headerAction2.triggered.connect(lambda: self.deleteColumn(table))
        
        copyAction = headerMenu.actions()[0] 
        submenu = QMenu(headerMenu)  
        action1 = QAction('File 1', submenu)
        if table == self.tableWidgetCommonPar:
            action2 = QAction('File 2', submenu)
        action3 = QAction('Selected', submenu)

        submenu.addAction(action1)
        if table == self.tableWidgetCommonPar:
            submenu.addAction(action2)
        submenu.addAction(action3)
        
        copyAction.setMenu(submenu)      
        action1.triggered.connect(lambda: self.copyColumn(1, table))
        if table == self.tableWidgetCommonPar:
            action2.triggered.connect(lambda: self.copyColumn(2, table))
            action3.triggered.connect(lambda: self.copyColumn(3, table))
        else:
            action3.triggered.connect(lambda: self.copyColumn(2, table))
        headerMenu.addAction(headerAction1)
        headerMenu.addAction(headerAction2)
        headerMenu.exec(globalPos)
        
    def searchTable(self):
        text = self.searchBox.text()
        if self.getActiveTab() == self.tab2Tab1:
            table = self.tableWidgetCommonPar
        elif self.getActiveTab() == self.tab2Tab2:
            table = self.tableWidgetExtraPar1
        elif self.getActiveTab() == self.tab2Tab3:
            table = self.tableWidgetExtraPar2
            
        for row in range( table.rowCount()):
            match = False
            item =  table.item(row, 0)
            if text.lower() in item.text().lower() and text!= '':
                match = True
                item.setBackground(Qt.yellow)
            else:
                item.setBackground(Qt.white)
                
            if match or text== '':
                table.showRow(row)
            else:
                table.hideRow(row)
    
    def getActiveTab(self):
        activeTabIndex = self.subtabWidget.currentIndex()
        activeTabWidget = self.subtabWidget.widget(activeTabIndex)
        return activeTabWidget
    
    def tabChanged(self, index):
        # self.searchBox.clear()
        activeTabWidget = self.subtabWidget.widget(index)
        
        if self.previousTab == self.tab2Tab1:
            table = self.tableWidgetCommonPar
        elif self.previousTab == self.tab2Tab2:
            table = self.tableWidgetExtraPar1
        elif self.previousTab == self.tab2Tab3:
            table = self.tableWidgetExtraPar2
            
        for row in range( table.rowCount()):
            item =  table.item(row, 0)
            table.showRow(row)
            item.setBackground(Qt.white)

        self.previousTab = activeTabWidget

        
    def reset(self):
        self.dictofCommonPar = {}
        self.listofCommonNames = []
        self.extraParinFile1 = {}
        self.extraParinFile2 = {}
        self.data1Processed = []
        self.data2Processed = []
        self.setofDifferrentKeysFile1 = {}
        self.setofDifferrentKeysFile2 = {}
        self.dictofIndexesFile1 = {}
        self.dictofIndexesFile2 = {}
        self.setofCommonKeys = {}
        self.serialNumber1 = ''
        self.serialNumber2 = ''
        self.softwareHash1 = ''
        self.softwareHash2 = ''
        self.tableWidgetCommonPar.setSortingEnabled(False)
        self.tableWidgetCommonPar.clearContents()
        self.tableWidgetCommonPar.setRowCount(0)
        self.tableWidgetExtraPar1.setSortingEnabled(False)
        self.tableWidgetExtraPar1.clearContents()
        self.tableWidgetExtraPar1.setRowCount(0)
        self.tableWidgetExtraPar2.setSortingEnabled(False)
        self.tableWidgetExtraPar2.clearContents()
        self.tableWidgetExtraPar2.setRowCount(0)
        #self.tableWidget.setColumnCount(0)
        
    def tableInit(self):
        header = self.tableWidgetCommonPar.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        readonly_delegate = ReadOnlyDelegate()
        self.tableWidgetCommonPar.setItemDelegateForColumn(0, readonly_delegate)
                
        self.tableWidgetCommonPar.setSortingEnabled(True)
        self.tableWidgetCommonPar.sortByColumn(0, QtCore.Qt.AscendingOrder)
        self.tableWidgetCommonPar.horizontalHeader().setSortIndicator(0, Qt.AscendingOrder)
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Interactive)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Interactive)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Interactive)
        
        headerTableExtraPar1 = self.tableWidgetExtraPar1.horizontalHeader()
        headerTableExtraPar1.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        readonly_delegate = ReadOnlyDelegate()
        self.tableWidgetExtraPar1.setItemDelegateForColumn(0, readonly_delegate)
        
        self.tableWidgetExtraPar1.setSortingEnabled(True)
        self.tableWidgetExtraPar1.sortByColumn(0, QtCore.Qt.AscendingOrder)
        self.tableWidgetExtraPar1.horizontalHeader().setSortIndicator(0, Qt.AscendingOrder)
        headerTableExtraPar1.setSectionResizeMode(0, QHeaderView.ResizeMode.Interactive)
        headerTableExtraPar1.setSectionResizeMode(1, QHeaderView.ResizeMode.Interactive)
        headerTableExtraPar1.setSectionResizeMode(2, QHeaderView.ResizeMode.Interactive)
        
        headerTableExtraPar2 = self.tableWidgetExtraPar2.horizontalHeader()
        headerTableExtraPar2.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        readonly_delegate = ReadOnlyDelegate()
        self.tableWidgetExtraPar2.setItemDelegateForColumn(0, readonly_delegate)
        
        self.tableWidgetExtraPar2.setSortingEnabled(True)
        self.tableWidgetExtraPar2.sortByColumn(0, QtCore.Qt.AscendingOrder)
        self.tableWidgetExtraPar2.horizontalHeader().setSortIndicator(0, Qt.AscendingOrder)
        headerTableExtraPar2.setSectionResizeMode(0, QHeaderView.ResizeMode.Interactive)
        headerTableExtraPar2.setSectionResizeMode(1, QHeaderView.ResizeMode.Interactive)
        headerTableExtraPar2.setSectionResizeMode(2, QHeaderView.ResizeMode.Interactive)
    
class ReadOnlyDelegate(QStyledItemDelegate):
    def createEditor(self, parent, option, index):
        return None
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    app.exec_()
    sys.exit()

